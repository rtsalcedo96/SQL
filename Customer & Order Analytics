-- In the following SQL code, I am querying a SQLite Studio database (BIT_DB) with multiple tables in it to quantify statistics about customer and order data.

-- The objective of the project below is to showcase my understanding of working with "messy" data in a database. I do this by conducting data filtering techniques alongside my regular analysis to answer real-world business questions.

-- 1. How many orders were placed in January?
SELECT COUNT(*) 
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
;

-- 2. How many of those orders were for an iPhone?

SELECT COUNT(*) 
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
AND Product = 'iPhone'
;

-- 3. Select the customer account numbers for all the orders that were placed in February.
SELECT DISTINCT acctnum 
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales feb
ON cust.order_id = feb.orderID
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
;

-- 4. Which product was the cheapest one sold in January, and what was the price?
SELECT MIN(price), Product 
FROM BIT_DB.JanSales
GROUP BY price
ORDER BY price ASC
LIMIT 1
;

-- 5. What is the total revenue for each product sold in January?
--(Revenue can be calculated using the number of products sold and the price of the products).
SELECT ROUND(SUM(quantity)*price) AS Revenue, Product
FROM BIT_DB.JanSales
GROUP BY Product
;

-- 6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT Product
,SUM(Quantity)
,SUM(Quantity)*Price AS Revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product
;

-- 7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT 
COUNT(DISTINCT cust.acctnum)
,ROUND(AVG(quantity*price)) AS avg_spent
FROM BIT_DB.FebSales feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderID = cust.order_id
WHERE feb.quantity > 2
AND length(orderid) = 6
AND orderid <> 'Order ID'
;

-- 8. List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT Product, SUM(Quantity)
FROM BIT_DB.FebSales
WHERE Location LIKE '%Los Angeles%'
GROUP BY Product
;

-- CHALLENGE QUESTIONS:

-- 1. Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
SELECT DISTINCT location, COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
AND location LIKE '%NY%'
GROUP BY location
HAVING COUNT(orderID) >= 3
;

-- 2. How many of each type of headphone were sold in February?
SELECT Product, SUM(Quantity) AS quantity
FROM BIT_DB.FebSales
WHERE Product LIKE '%Headphones%'
GROUP BY Product
;

-- 3. What was the average amount spent per account in February?
SELECT ROUND(SUM(quantity * price)/COUNT(cust.acctnum))
AS avg_spent
FROM BIT_DB.FebSales feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderID = cust.order_id
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
;

-- 4. What was the average quantity of products purchased per account in February?
SELECT SUM(quantity)/COUNT(cust.acctnum)
FROM BIT_DB.FebSales feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderID = cust.order_id
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'
;

-- 5. Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT Product, 
SUM(quantity*price) AS prod_rev
FROM BIT_DB.JanSales 
GROUP BY Product
ORDER BY prod_rev DESC
LIMIT 1
;
